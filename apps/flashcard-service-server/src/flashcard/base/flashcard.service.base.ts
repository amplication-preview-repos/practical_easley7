/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Flashcard as PrismaFlashcard,
  Category as PrismaCategory,
  Language as PrismaLanguage,
  Level as PrismaLevel,
} from "@prisma/client";

export class FlashcardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FlashcardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.flashcard.count(args);
  }

  async flashcards(
    args: Prisma.FlashcardFindManyArgs
  ): Promise<PrismaFlashcard[]> {
    return this.prisma.flashcard.findMany(args);
  }
  async flashcard(
    args: Prisma.FlashcardFindUniqueArgs
  ): Promise<PrismaFlashcard | null> {
    return this.prisma.flashcard.findUnique(args);
  }
  async createFlashcard(
    args: Prisma.FlashcardCreateArgs
  ): Promise<PrismaFlashcard> {
    return this.prisma.flashcard.create(args);
  }
  async updateFlashcard(
    args: Prisma.FlashcardUpdateArgs
  ): Promise<PrismaFlashcard> {
    return this.prisma.flashcard.update(args);
  }
  async deleteFlashcard(
    args: Prisma.FlashcardDeleteArgs
  ): Promise<PrismaFlashcard> {
    return this.prisma.flashcard.delete(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.flashcard
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getLanguage(parentId: string): Promise<PrismaLanguage | null> {
    return this.prisma.flashcard
      .findUnique({
        where: { id: parentId },
      })
      .language();
  }

  async getLevel(parentId: string): Promise<PrismaLevel | null> {
    return this.prisma.flashcard
      .findUnique({
        where: { id: parentId },
      })
      .level();
  }
}
