/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LevelService } from "../level.service";
import { LevelCreateInput } from "./LevelCreateInput";
import { Level } from "./Level";
import { LevelFindManyArgs } from "./LevelFindManyArgs";
import { LevelWhereUniqueInput } from "./LevelWhereUniqueInput";
import { LevelUpdateInput } from "./LevelUpdateInput";
import { FlashcardFindManyArgs } from "../../flashcard/base/FlashcardFindManyArgs";
import { Flashcard } from "../../flashcard/base/Flashcard";
import { FlashcardWhereUniqueInput } from "../../flashcard/base/FlashcardWhereUniqueInput";

export class LevelControllerBase {
  constructor(protected readonly service: LevelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Level })
  async createLevel(@common.Body() data: LevelCreateInput): Promise<Level> {
    return await this.service.createLevel({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Level] })
  @ApiNestedQuery(LevelFindManyArgs)
  async levels(@common.Req() request: Request): Promise<Level[]> {
    const args = plainToClass(LevelFindManyArgs, request.query);
    return this.service.levels({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Level })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async level(
    @common.Param() params: LevelWhereUniqueInput
  ): Promise<Level | null> {
    const result = await this.service.level({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Level })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLevel(
    @common.Param() params: LevelWhereUniqueInput,
    @common.Body() data: LevelUpdateInput
  ): Promise<Level | null> {
    try {
      return await this.service.updateLevel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Level })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLevel(
    @common.Param() params: LevelWhereUniqueInput
  ): Promise<Level | null> {
    try {
      return await this.service.deleteLevel({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/flashcards")
  @ApiNestedQuery(FlashcardFindManyArgs)
  async findFlashcards(
    @common.Req() request: Request,
    @common.Param() params: LevelWhereUniqueInput
  ): Promise<Flashcard[]> {
    const query = plainToClass(FlashcardFindManyArgs, request.query);
    const results = await this.service.findFlashcards(params.id, {
      ...query,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        categoryId: true,
        createdAt: true,
        id: true,

        language: {
          select: {
            id: true,
          },
        },

        languageId: true,

        level: {
          select: {
            id: true,
          },
        },

        levelId: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/flashcards")
  async connectFlashcards(
    @common.Param() params: LevelWhereUniqueInput,
    @common.Body() body: FlashcardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flashcards: {
        connect: body,
      },
    };
    await this.service.updateLevel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/flashcards")
  async updateFlashcards(
    @common.Param() params: LevelWhereUniqueInput,
    @common.Body() body: FlashcardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flashcards: {
        set: body,
      },
    };
    await this.service.updateLevel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/flashcards")
  async disconnectFlashcards(
    @common.Param() params: LevelWhereUniqueInput,
    @common.Body() body: FlashcardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flashcards: {
        disconnect: body,
      },
    };
    await this.service.updateLevel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
