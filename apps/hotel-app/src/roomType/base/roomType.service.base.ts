/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RoomType as PrismaRoomType } from "@prisma/client";

export class RoomTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RoomTypeCountArgs, "select">): Promise<number> {
    return this.prisma.roomType.count(args);
  }

  async roomTypes(
    args: Prisma.RoomTypeFindManyArgs
  ): Promise<PrismaRoomType[]> {
    return this.prisma.roomType.findMany(args);
  }
  async roomType(
    args: Prisma.RoomTypeFindUniqueArgs
  ): Promise<PrismaRoomType | null> {
    return this.prisma.roomType.findUnique(args);
  }
  async createRoomType(
    args: Prisma.RoomTypeCreateArgs
  ): Promise<PrismaRoomType> {
    return this.prisma.roomType.create(args);
  }
  async updateRoomType(
    args: Prisma.RoomTypeUpdateArgs
  ): Promise<PrismaRoomType> {
    return this.prisma.roomType.update(args);
  }
  async deleteRoomType(
    args: Prisma.RoomTypeDeleteArgs
  ): Promise<PrismaRoomType> {
    return this.prisma.roomType.delete(args);
  }
}
