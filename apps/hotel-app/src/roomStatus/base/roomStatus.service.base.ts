/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RoomStatus as PrismaRoomStatus } from "@prisma/client";

export class RoomStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RoomStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.roomStatus.count(args);
  }

  async roomStatuses(
    args: Prisma.RoomStatusFindManyArgs
  ): Promise<PrismaRoomStatus[]> {
    return this.prisma.roomStatus.findMany(args);
  }
  async roomStatus(
    args: Prisma.RoomStatusFindUniqueArgs
  ): Promise<PrismaRoomStatus | null> {
    return this.prisma.roomStatus.findUnique(args);
  }
  async createRoomStatus(
    args: Prisma.RoomStatusCreateArgs
  ): Promise<PrismaRoomStatus> {
    return this.prisma.roomStatus.create(args);
  }
  async updateRoomStatus(
    args: Prisma.RoomStatusUpdateArgs
  ): Promise<PrismaRoomStatus> {
    return this.prisma.roomStatus.update(args);
  }
  async deleteRoomStatus(
    args: Prisma.RoomStatusDeleteArgs
  ): Promise<PrismaRoomStatus> {
    return this.prisma.roomStatus.delete(args);
  }
}
